# Generated by Django 4.2.20 on 2025-04-26 23:47

from django.db import migrations

# Function to create the initial achievement data
def create_initial_achievements(apps, schema_editor):
    # We get the model from the versioned app registry;
    # avoids importing directly which might cause issues with historical models.
    Achievement = apps.get_model('challenge', 'Achievement') # Use ('your_app_name', 'Achievement')
    db_alias = schema_editor.connection.alias # Needed for update_or_create

    # --- Define your achievements here ---
    achievements_data = [
        {'name': 'First Check-in', 'description': 'Started your journey by checking in for the first time', 'icon': '🟢', 'criteria_type': 'TOTAL_LOGS', 'criteria_value': 1},
        {'name': '3-Day Streak', 'description': 'Stayed clean for 3 consecutive days', 'icon': '🔥', 'criteria_type': 'STREAK', 'criteria_value': 3},
        {'name': '7-Day Winner', 'description': 'Completed a 7-day clean streak', 'icon': '🏅', 'criteria_type': 'STREAK', 'criteria_value': 7},
        {'name': '30 Days Clean', 'description': 'Reached a month without relapse', 'icon': '🌟', 'criteria_type': 'STREAK', 'criteria_value': 30},
        {'name': '90 Day Legend', 'description': 'Completed the ultimate 90-day clean streak', 'icon': '🏆', 'criteria_type': 'STREAK', 'criteria_value': 90},
        {'name': 'Comeback King', 'description': 'Had the courage to be honest and start again after a relapse', 'icon': '🔄', 'criteria_type': 'RELAPSE_LOGGED', 'criteria_value': 1}, # Requires at least 1 relapse log
        # Add any other achievements you want defined initially
        # {'name': 'Journal Starter', 'description': 'Completed your first journal entry', 'icon': '📔', 'criteria_type': 'JOURNAL_ENTRIES', 'criteria_value': 1},
    ]

    # Using update_or_create makes this migration safe to run multiple times
    # It finds an achievement by 'name' or creates a new one.
    for data in achievements_data:
        Achievement.objects.using(db_alias).update_or_create(
            name=data['name'], # Field to check for existence
            defaults=data      # Fields to set/update
        )

class Migration(migrations.Migration):

    dependencies = [
        ('challenge', '0006_timelineevent_event_type_and_more'),
    ]

    operations = [
        # Add the RunPython operation to execute the function
        migrations.RunPython(create_initial_achievements),
    ]
