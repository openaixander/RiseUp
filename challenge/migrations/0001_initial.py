# Generated by Django 4.2.20 on 2025-04-17 00:52

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="The name of the achievement (e.g., '3 Days Clean').", max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='A brief description of how to earn the achievement.')),
                ('icon', models.CharField(blank=True, help_text="Icon representation (e.g., emoji 'ðŸ”¥' or FontAwesome class 'fas fa-trophy').", max_length=50, null=True)),
                ('criteria_type', models.CharField(choices=[('FIRST_LOGIN', 'First Login'), ('FIRST_CHECKIN', 'First Check-in'), ('STREAK', 'Consecutive Clean Days Streak'), ('TOTAL_CLEAN', 'Total Clean Days'), ('PROFILE_COMPLETE', 'Profile Completion')], help_text='The type of condition required to unlock this achievement.', max_length=20)),
                ('criteria_value', models.PositiveIntegerField(help_text='The value associated with the criteria (e.g., 3 for a 3-day streak).')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
                'ordering': ['criteria_type', 'criteria_value'],
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name or title of the challenge', max_length=200)),
                ('start_date', models.DateField(help_text='The date the challenge officially began.')),
                ('duration_days', models.PositiveIntegerField(help_text='The total duration of the challenge in days')),
                ('is_active', models.BooleanField(default=True, help_text="Is this the user's current, current challenge?")),
                ('enable_daily_reminder', models.BooleanField(default=True, help_text='Should daily check-in reminders be sent for this challenge?')),
                ('reminder_time', models.TimeField(blank=True, default='12:00:00', help_text='Preferred time for the daily check-in reminder', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(help_text='The user who initated this challenge.', on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Challenge',
                'verbose_name_plural': 'Challenges',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(max_length=50)),
                ('text', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='TimelineEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(choices=[('JOINED', 'User Joined'), ('CHALLENGE_STARTED', 'Challenge Started'), ('CHALLENGE_COMPLETED', 'Challenge Completed'), ('ACHIEVEMENT_UNLOCKED', 'Achievement Unlocked'), ('RELAPSE_LOGGED', 'Relapse Logged'), ('CLEAN_DAY_LOGGED', 'Clean Day Logged'), ('REFLECTION_ADDED', 'Reflection Added'), ('JOURNAL_ENTRY_ADDED', 'Journal Entry Added'), ('STREAK_MILESTONE', 'Streak Milestone Reached')], default=django.utils.timezone.now, help_text='The type of event that occurred.')),
                ('title', models.CharField(help_text="A short title for the timeline entry (e.g., '3-Day Streak Achieved!').", max_length=255)),
                ('description', models.TextField(blank=True, help_text='Optional longer description or context for the event.')),
                ('user', models.ForeignKey(help_text='The user associated with this timeline event.', on_delete=django.db.models.deletion.CASCADE, related_name='timeline_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Timeline Event',
                'verbose_name_plural': 'Timeline Events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Reflection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text="The content of the user's reflection.")),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='When the reflection was saved.')),
                ('user', models.ForeignKey(help_text='The user who wrote this reflection.', on_delete=django.db.models.deletion.CASCADE, related_name='reflections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Reflection',
                'verbose_name_plural': 'Reflections',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True, help_text='The timestamp when the achievement was unlocked.')),
                ('achievement', models.ForeignKey(help_text='The achievement that was unlocked.', on_delete=django.db.models.deletion.CASCADE, related_name='unlocked_by', to='challenge.achievement')),
                ('user', models.ForeignKey(help_text='The user who unlocked the achievement.', on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Achievement',
                'verbose_name_plural': 'User Achievements',
                'ordering': ['-unlocked_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='DailyLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='The specific date this log entry refers to')),
                ('status', models.CharField(choices=[('CLEAN', 'Clean Day'), ('RELAPSE', 'Relapse Day')], help_text="The user's status for this day", max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('challenge', models.ForeignKey(blank=True, help_text='The challenge this log entry is associated with.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='logs', to='challenge.challenge')),
                ('user', models.ForeignKey(help_text='The user this log belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='daily_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Daily Log',
                'verbose_name_plural': 'Daily Logs',
                'ordering': ['date'],
                'unique_together': {('user', 'date')},
            },
        ),
    ]
